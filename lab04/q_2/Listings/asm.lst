


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             Reset,DATA,READONLY
    2 00000000 12345678        DCD              0X12345678
    3 00000004 00000000        DCD              Reset_Handler
    4 00000008                 AREA             CODE_SEGMET,CODE,READONLY
    5 00000000         Reset_Handler
                               proc
    6 00000000                 export           Reset_Handler    [weak]
    7 00000000 F640 20BC       MOV              R0,0xABC    ; input data, you c
                                                            an input whatever i
                                                            nt you want
    8 00000004 4601            MOV              R1,R0
    9 00000006 F04F 0200       MOV              R2,#0       ; store the number 
                                                            of bit of the input
                                                             number, this loop 
                                                            is to determine k
   10 0000000A         NUMBER_BIT
   11 0000000A F102 0201       ADD              R2,R2,#1
   12 0000000E 0849            LSRS             R1,R1,#1
   13 00000010 DCFB            BGT              NUMBER_BIT
   14 00000012 F04F 0300       MOV              R3,#0       ; R3 = r, R2 = k, 2
                                                            ^r-r-1 >= K, R4 for
                                                             tmp, this loop is 
                                                            to determine r
   15 00000016         LOOPRK
   16 00000016 F103 0301       ADD              R3,R3,#1
   17 0000001A F04F 0401       MOV              R4, #1
   18 0000001E FA04 F403       LSL              R4, R4, R3
   19 00000022 EBA4 0403       SUB              R4,R4,R3
   20 00000026 F1A4 0401       SUB              R4,R4,#1
   21 0000002A 1AA4            SUBS             R4,R4,R2
   22 0000002C DBF3            BLT              LOOPRK
   23 0000002E         
   24 0000002E         ; dump k bit int to k+r bit Hamming Code in R1, R7,R8,R9
                       ,R10 for tmp
   25 0000002E F04F 0100       MOV              R1,#0
   26 00000032 F04F 0401       MOV              R4, #1      ;R4 stands for the 
                                                            next 2^n
   27 00000036 F04F 0501       MOV              R5, #1      ;R5 stands for the 
                                                            current bit in hamm
                                                            ing code
   28 0000003A F04F 0600       MOV              R6, #0      ;R5 stands for the 
                                                            current bit in orig
                                                            inal int
   29 0000003E         DUMP
   30 0000003E 42A5            CMP              R5,R4
   31 00000040 BF08 0064       LSLEQ            R4,R4,#1    ; should prepare fo
                                                            r the next parity c
                                                            ode, instead of set
                                                            ting information bi
                                                            t
   32 00000044 F04F 0701       MOV              R7,#1
   33 00000048 FA07 F706       LSL              R7,R7,R6    ; R7 = 2^{R6} & R0,
                                                             get the R6-th bit 
                                                            in original int
   34 0000004C 4007            ANDS             R7,R7,R0
   35 0000004E F04F 0700       MOV              R7,#0
   36 00000052 BF18 2701       MOVNE            R7,#1       ; R6 = 2^{R5-1}, pr
                                                            epare to set the R5
                                                            -th bit in hamming 



ARM Macro Assembler    Page 2 


                                                            code
   37 00000056 F1A5 0501       SUB              R5,R5,#1
   38 0000005A FA07 F705       LSL              R7,R7,R5
   39 0000005E F105 0501       ADD              R5,R5,#1
   40 00000062 EBB4 0F45       CMP              R4,R5,LSL #1
   41 00000066 D01E            BEQ              CONT
   42 00000068 EA81 0107       EOR              R1,R1,R7    ; copy the $R6-th b
                                                            it in original int 
                                                            to the $R5-th bit i
                                                            n hamming-code
   43 0000006C F106 0601       ADD              R6,R6,#1
   44 00000070 B1CF            CBZ              R7,CONT
   45 00000072 46A8            MOV              R8,R5
   46 00000074 F04F 0A00       MOV              R10,#0
   47 00000078         LOOP
   48 00000078 F018 0701       ANDS             R7,R8,#1
   49 0000007C F04F 0900       MOV              R9,#0
   50 00000080 BF18 F04F 
              0901             MOVNE            R9,#1
   51 00000086 FA19 F90A       LSLS             R9,R9,R10
   52 0000008A F04F 0701       MOV              R7,#1
   53 0000008E BF1C F1A9 
              0901             SUBNE            R9,R9,#1
   54 00000094 FA07 F909       LSLNE            R9,R7,R9
   55 00000098 EA81 0109       EOR              R1,R1,R9
   56 0000009C         
   57 0000009C EA5F 0858       LSRS             R8,R8,#1
   58 000000A0 F10A 0A01       ADD              R10,R10,#1
   59 000000A4 D1E8            BNE              LOOP
   60 000000A6         CONT
   61 000000A6 F105 0501       ADD              R5,R5,#1
   62 000000AA 4296            CMP              R6,R2
   63 000000AC DBC7            BLT              DUMP
   64 000000AE         
   65 000000AE         
   66 000000AE 468B            MOV              R11,R1      ; backup the parity
                                                             code
   67 000000B0 F04F 0801       MOV              R8,#1
   68 000000B4 EA80 00C8       EOR              R0,R8,LSL #3 ; change the 3-th 
                                                            bit of R0
   69 000000B8         
   70 000000B8         ; same again, calc the parity code for new hamming code
   71 000000B8         ; dump k bit int to k+r bit Hamming Code in R1, R7,R8,R9
                       ,R10 for tmp
   72 000000B8 F04F 0100       MOV              R1,#0
   73 000000BC F04F 0401       MOV              R4, #1      ;R4 stands for the 
                                                            next 2^n
   74 000000C0 F04F 0501       MOV              R5, #1      ;R5 stands for the 
                                                            current bit in hamm
                                                            ing code
   75 000000C4 F04F 0600       MOV              R6, #0      ;R5 stands for the 
                                                            current bit in orig
                                                            inal int
   76 000000C8         DUMP2
   77 000000C8 42A5            CMP              R5,R4
   78 000000CA BF08 0064       LSLEQ            R4,R4,#1    ; should prepare fo
                                                            r the next parity c
                                                            ode, instead of set
                                                            ting information bi



ARM Macro Assembler    Page 3 


                                                            t
   79 000000CE F04F 0701       MOV              R7,#1
   80 000000D2 FA07 F706       LSL              R7,R7,R6    ; R7 = 2^{R6} & R0,
                                                             get the R6-th bit 
                                                            in original int
   81 000000D6 4007            ANDS             R7,R7,R0
   82 000000D8 F04F 0700       MOV              R7,#0
   83 000000DC BF18 2701       MOVNE            R7,#1       ; R6 = 2^{R5-1}, pr
                                                            epare to set the R5
                                                            -th bit in hamming 
                                                            code
   84 000000E0 F1A5 0501       SUB              R5,R5,#1
   85 000000E4 FA07 F705       LSL              R7,R7,R5
   86 000000E8 F105 0501       ADD              R5,R5,#1
   87 000000EC EBB4 0F45       CMP              R4,R5,LSL #1
   88 000000F0 D01E            BEQ              CONT2
   89 000000F2 EA81 0107       EOR              R1,R1,R7    ; copy the $R6-th b
                                                            it in original int 
                                                            to the $R5-th bit i
                                                            n hamming-code
   90 000000F6 F106 0601       ADD              R6,R6,#1
   91 000000FA B1CF            CBZ              R7,CONT2
   92 000000FC 46A8            MOV              R8,R5
   93 000000FE F04F 0A00       MOV              R10,#0
   94 00000102         LOOP2
   95 00000102 F018 0701       ANDS             R7,R8,#1
   96 00000106 F04F 0900       MOV              R9,#0
   97 0000010A BF18 F04F 
              0901             MOVNE            R9,#1
   98 00000110 FA19 F90A       LSLS             R9,R9,R10
   99 00000114 F04F 0701       MOV              R7,#1
  100 00000118 BF1C F1A9 
              0901             SUBNE            R9,R9,#1
  101 0000011E FA07 F909       LSLNE            R9,R7,R9
  102 00000122 EA81 0109       EOR              R1,R1,R9
  103 00000126         
  104 00000126 EA5F 0858       LSRS             R8,R8,#1
  105 0000012A F10A 0A01       ADD              R10,R10,#1
  106 0000012E D1E8            BNE              LOOP2
  107 00000130         CONT2
  108 00000130 F105 0501       ADD              R5,R5,#1
  109 00000134 4296            CMP              R6,R2
  110 00000136 DBC7            BLT              DUMP2
  111 00000138         
  112 00000138 F04F 0400       MOV              R4,#0       ; R4 store the posi
                                                            tion of the error b
                                                            it
  113 0000013C F04F 0500       MOV              R5,#0
  114 00000140         FLOOP
  115 00000140 F04F 0601       MOV              R6,#1
  116 00000144 FA06 F605       LSL              R6,R6,R5
  117 00000148 F04F 0901       MOV              R9,#1
  118 0000014C F1A6 0601       SUB              R6,R6,#1
  119 00000150 FA09 F606       LSL              R6,R9,R6
  120 00000154 EA01 0706       AND              R7,R1,R6
  121 00000158 EA0B 0806       AND              R8,R11,R6
  122 0000015C EA97 0608       EORS             R6,R7,R8
  123 00000160 F04F 0901       MOV              R9,#1
  124 00000164 FA09 F905       LSL              R9,R9,R5



ARM Macro Assembler    Page 4 


  125 00000168 BF18 444C       ADDNE            R4,R4,R9
  126 0000016C         
  127 0000016C F105 0501       ADD              R5,R5,#1
  128 00000170 429D            CMP              R5,R3
  129 00000172 DBE5            BLT              FLOOP
  130 00000174         
  131 00000174 F04F 0501       MOV              R5,#1
  132 00000178 F1A4 0401       SUB              R4,R4,#1
  133 0000017C FA05 F404       LSL              R4,R5,R4
  134 00000180 EA81 0104       EOR              R1,R1,R4    ; now the bit on th
                                                            e hamming code shou
                                                            ld be corrected
  135 00000184         
  136 00000184 F04F 0000       MOV              R0,#0
  137 00000188 F04F 0401       MOV              R4, #1      ;R4 stands for the 
                                                            next 2^n
  138 0000018C F04F 0501       MOV              R5, #1      ;R5 stands for the 
                                                            current bit in hamm
                                                            ing code
  139 00000190 F04F 0600       MOV              R6, #0      ;R5 stands for the 
                                                            current bit in orig
                                                            inal int
  140 00000194         DUMPR                                ; convert hamming c
                                                            ode to original cod
                                                            e in R0
  141 00000194 42A5            CMP              R5,R4
  142 00000196 BF08 0064       LSLEQ            R4,R4,#1    ; parity code
  143 0000019A D013            BEQ              CONTR
  144 0000019C F04F 0701       MOV              R7,#1
  145 000001A0 F1A5 0501       SUB              R5,R5,#1
  146 000001A4 FA07 F705       LSL              R7,R7,R5
  147 000001A8 F105 0501       ADD              R5,R5,#1
  148 000001AC 400F            ANDS             R7,R7,R1
  149 000001AE F04F 0800       MOV              R8,#0
  150 000001B2 BF18 F04F 
              0801             MOVNE            R8,#1
  151 000001B8 FA08 F806       LSL              R8,R8,R6
  152 000001BC EA80 0008       EOR              R0,R0,R8
  153 000001C0 F106 0601       ADD              R6,R6,#1
  154 000001C4         CONTR
  155 000001C4 F105 0501       ADD              R5,R5,#1
  156 000001C8 4296            CMP              R6,R2
  157 000001CA DBE3            BLT              DUMPR
  158 000001CC         ; now R0 is restored!
  159 000001CC BF00            NOP
  160 000001CE                 ENDP
  161 000001CE                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\asm.d -o.\objects\asm.o -I.\RTE\_Target_1 -IE:\Users\
Weaverzhu\AppData\Local\Arm\Packs\TexasInstruments\MSP432P4xx_DFP\3.2.6\Device\
Include -IE:\Keil_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine=
"__UVISION_VERSION SETA 528" --predefine="__MSP432P401R__ SETA 1" --list=.\list
ings\asm.lst asm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Reset 00000000

Symbol: Reset
   Definitions
      At line 1 in file asm.s
   Uses
      None
Comment: Reset unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CODE_SEGMET 00000000

Symbol: CODE_SEGMET
   Definitions
      At line 4 in file asm.s
   Uses
      None
Comment: CODE_SEGMET unused
CONT 000000A6

Symbol: CONT
   Definitions
      At line 60 in file asm.s
   Uses
      At line 41 in file asm.s
      At line 44 in file asm.s

CONT2 00000130

Symbol: CONT2
   Definitions
      At line 107 in file asm.s
   Uses
      At line 88 in file asm.s
      At line 91 in file asm.s

CONTR 000001C4

Symbol: CONTR
   Definitions
      At line 154 in file asm.s
   Uses
      At line 143 in file asm.s
Comment: CONTR used once
DUMP 0000003E

Symbol: DUMP
   Definitions
      At line 29 in file asm.s
   Uses
      At line 63 in file asm.s
Comment: DUMP used once
DUMP2 000000C8

Symbol: DUMP2
   Definitions
      At line 76 in file asm.s
   Uses
      At line 110 in file asm.s
Comment: DUMP2 used once
DUMPR 00000194

Symbol: DUMPR
   Definitions
      At line 140 in file asm.s
   Uses
      At line 157 in file asm.s
Comment: DUMPR used once
FLOOP 00000140



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: FLOOP
   Definitions
      At line 114 in file asm.s
   Uses
      At line 129 in file asm.s
Comment: FLOOP used once
LOOP 00000078

Symbol: LOOP
   Definitions
      At line 47 in file asm.s
   Uses
      At line 59 in file asm.s
Comment: LOOP used once
LOOP2 00000102

Symbol: LOOP2
   Definitions
      At line 94 in file asm.s
   Uses
      At line 106 in file asm.s
Comment: LOOP2 used once
LOOPRK 00000016

Symbol: LOOPRK
   Definitions
      At line 15 in file asm.s
   Uses
      At line 22 in file asm.s
Comment: LOOPRK used once
NUMBER_BIT 0000000A

Symbol: NUMBER_BIT
   Definitions
      At line 10 in file asm.s
   Uses
      At line 13 in file asm.s
Comment: NUMBER_BIT used once
Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 5 in file asm.s
   Uses
      At line 3 in file asm.s
      At line 6 in file asm.s

13 symbols
348 symbols in table
